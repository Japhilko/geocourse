dat1 <- opq(bbox = 'Ladenburg') %>%
add_osm_feature(key = 'shop', value = 'bakery') %>%
osmdata_sf ()
library(osmdata)
library(magrittr)
dat1 <- opq(bbox = 'Ladenburg') %>%
add_osm_feature(key = 'shop', value = 'bakery') %>%
osmdata_sf ()
dat1
unlist(dat1)
unlist(lapply(dat1,nrow))
dat <- sf::st_read ('../data/Ladenburg_amenity.osm',
layer = 'points',
quiet = TRUE)
getwd()
setwd("slides")
dat <- sf::st_read ('../data/Ladenburg_amenity.osm',
layer = 'points',
quiet = TRUE)
unlist(lapply(dat,nrow))
dat
dat@data
nrow(dat)
?osmdata_sf
tm_shape(sfc)
library(tmap)
tm_shape(sfc)
ls <- st_linestring(bb_poly)
library(dplyr)
library(sf)
ls <- st_linestring(bb_poly)
bb_poly <- getbb(place_name = "Ladenburg",
format_out = "polygon")
ls <- st_linestring(bb_poly)
sfc <- st_sfc(ls)
tm_shape(sfc)
tm_basemap(sfc)
tm_polygons(sfc)
qtm(sfc)
?tm_bubbles
qtm(sfc) + tm_bubbles(dat, size=2)
tm_bubbles(dat, size=2)
tm_shape(sfc)
World
unemp <-read.csv("https://raw.githubusercontent.com/Japhilko/GeoData/master/2015/data/Unemployment.csv")
head(unemp)
library(maptools)
data("wrld_simpl")
ind <- match(unemp$geo,wrld_simpl@data$NAME)
ind
ind <- match(unemp$geo[-1:5],wrld_simpl@data$NAME)
ind <- match(unemp$geo[-c(1:5)],wrld_simpl@data$NAME)
ind
unemp <- unemp[-c(1:5),]
ind <- match(unemp$geo,wrld_simpl@data$NAME)
mymap <- wrld_simpl[ind,]
mymap$X2014M10 <- unemp$X2014M10
sp::spplot(mymap,"X2014M10")
?df_pop_county
# install.packages("choroplethr")
library("choroplethr")
?df_pop_county
?county_choropleth
?df_president_ts
kable(df_president_ts[8:16,1:8])
kable(df_president_ts[42:48,42:48])
# Chunk 1: setup
knitr::opts_chunk$set(message=F,warning=F,cache=T,fig.height=4)
library(knitr)
sol <- F
# Chunk 3
library(maptools)
data(wrld_simpl)
# Chunk 4
kable(head(wrld_simpl@data[,c("ISO2","NAME","AREA","POP2005")]))
# Chunk 5
plot(wrld_simpl)
# Chunk 6
gini <- read.csv("../data/gini-index_csv.csv")
# Chunk 7
kable(head(gini))
# Chunk 8
gini12 <- gini[gini$Year==2012,]
summary(gini12$Value)
# Chunk 9
vec_a <- c("A",2,6,1,"C")
vec_b <- c(1,"C",2)
match(vec_a,vec_b)
# Chunk 10
ind <- match(gini12$Country.Code,wrld_simpl$ISO3)
# Chunk 11
ind2 <- ind[!is.na(ind)]
# Chunk 12
ginimap <- wrld_simpl[ind2,]
# Chunk 13
ginimap@data$gini12 <- gini12$Value[!is.na(ind)]
# Chunk 14
library(sp)
spplot(ginimap,"gini12")
# Chunk 15
unemp <-read.csv("https://raw.githubusercontent.com/Japhilko/GeoData/master/2015/data/Unemployment.csv")
library(maptools)
data("wrld_simpl")
unemp <- unemp[-c(1:5),]
ind <- match(unemp$geo,wrld_simpl@data$NAME)
mymap <- wrld_simpl[ind,]
mymap$X2014M10 <- unemp$X2014M10
sp::spplot(mymap,"X2014M10")
# Chunk 16
library(knitr)
library(DT)
internet <- F
Nint <- !internet
par(mai=c(0,0,0,0))
# Chunk 18
# install.packages("choroplethr")
library("choroplethr")
data(df_pop_state)
# Chunk 19
datatable(df_pop_state,options = list(pageLength = 5))
# Chunk 20
kable(head(df_pop_state))
# Chunk 21
state_choropleth(df_pop_state)
# Chunk 22
state_choropleth(df_pop_state, title="2012 US State Population Estimates", legend="Population")
# Chunk 23
state_choropleth(df_pop_state,
title= "2012 Population Estimates",
legend= "Population", num_colors = 1,
zoom=c("california","washington","oregon"))
# Chunk 25
data(df_pop_county)
county_choropleth(df_pop_county)
# Chunk 27
data(df_pop_country)
country_choropleth(df_pop_country,
title      = "2012 Population Estimates",
legend     = "Population",
num_colors = 1,
zoom       = c("united states of america",
"mexico", "canada"))
# Chunk 28
library(WDI)
choroplethr_wdi(code="SP.POP.TOTL", year=2012,
title="2012 Population",
num_colors=1)
# Chunk 29
choroplethr_wdi(code="SP.DYN.LE00.IN", year=2012,
title="2012 Life Expectancy")
# Chunk 30
data(df_president_ts)
kable(df_president_ts[42:48,42:48])
kable(df_president_ts[42:48,c(1,22:28)])
kable(df_president_ts[42:48,c(1,32:38)])
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE,cache=T)
GESIS <- F
athome <- !GESIS
# Chunk 2
setwd("D:/Daten/Daten/GeoDaten/")
library(maptools)
onb <- readShapePoly("onb_grenzen.shp")
# Chunk 3
par(mai=c(0,0,0,0))
plot(onb)
# Chunk 4
vwb <- onb@data$ONB_NUMMER
vwb1 <- substr(vwb, 1,1)
# Chunk 5
barchart(table(vwb1),col="royalblue",
xlab="HÃ¤ufigkeit")
# Chunk 6
vwb6 <- onb[vwb1==6,]
plot(vwb6)
# Chunk 7
vwb6c <- unionSpatialPolygons(vwb6,
rep(1,length(vwb6)))
plot(vwb6c,col="royalblue")
# Chunk 8
data_path <- "D:/GESIS/data/"
# Chunk 9
data_path <- "D:/Daten/Daten/GeoDaten/"
# Chunk 10
library(rgdal)
# Chunk 11
setwd(data_path)
plz <- readOGR ("post_pl.shp","post_pl")
# Chunk 12
plzbereich <- substr(plz@data$PLZ99,1,2)
plot(plz[plzbereich=="68",])
# Chunk 13
ma_map <- plz[plz$PLZORT99=="Mannheim",]
plot(ma_map)
# Chunk 14
library(maptools)
ma_map2 <- unionSpatialPolygons(SpP = ma_map,
IDs = rep(1,length(ma_map)))
plot(ma_map2)
# Chunk 15
ddat <- maptools::unionSpatialPolygons(SpP = plz,
IDs = rep(1,length(plz)))
# Chunk 17
# set.seed(323)
set.seed(5)
n <- 1000
spatsamp <- spsample(ddat,n,type="random")
# Chunk 18
library(ggmap)
load(paste0("../data/spatsamp_",sampplz,".RData"))
load(paste0("../data/spatsamp_Deutschland.RData"))
getwd()
setwd("slides")
load(paste0("../data/spatsamp_Deutschland.RData"))
plot(ddat)
load("../data/ddat.RData")
plot(ddat)
points(spatsamp)
plot(ddat)
points(spatsamp,pch=20)
points(spatsamp[ind_str,],pch=20,col="green")
install.packages("SoDA")
install.packages("mapdata")
DEU3 <- getData('GADM', country='DEU', level=3)
setwd("../data/")
library(raster)
DEU3 <- getData('GADM', country='DEU', level=3)
plot(DEU3)
library(sf)
nc
demo(nc, ask = FALSE, echo = FALSE)
plot(st_geometry(nc))
str(nc)
head(nc)
plot(nc)
geodata_path <- "D:/Daten/Daten/GeoDaten/"
geodata_path <- "D:/Daten/Daten/GeoDaten/"
setwd(geodata_path)
fname <- system.file("post_pl.shp", package="sf")
plz <- st_read(fname)
setwd(data_path)
data_path <- "D:/GESIS/data/"
setwd(data_path)
fname <- system.file("post_pl.shp", package="sf")
plz <- st_read(fname)
plz <- st_read("post_pl.shp")
plz
plot(plz)
library(osmdata)
bb_poly <- getbb(place_name = "Amsterdam",
format_out = "polygon")
pol <- sf::st_polygon(bb_poly)
pol
str(plz)
st_as_sfc(pol)
st_geometrycollection(list(pol))
ab <- st_geometrycollection(list(pol))
str(ab)
ab <- st_geometrycollection(pol)
ab <- st_polygonize(pol)
ab <- st_polygonize(bb_poly)
ab <- st_polygonize(pol)
ls <- st_multilinestring(bb_poly)
ab <- st_polygonize(ls)
str(ab)
plot(ab)
bb_poly_lu <- getbb(place_name = "Ludwigshafen",
format_out = "polygon")
bb_poly_lu <- getbb(place_name = "Mannheim",
format_out = "polygon")
bb_poly_hd <- getbb(place_name = "Heidelberg",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_ma)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_ma)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_ma)
bb_poly_hd <- getbb(place_name = "Heidelberg",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_hd)
ab <- st_polygonize(ls)
plot(ab)
bbox <- get_bbox (c (-0.13, 51.51, -0.11, 51.52))
library(osmdata)
bbox <- get_bbox (c (-0.13, 51.51, -0.11, 51.52))
library(osmplotr)
bbox <- get_bbox (c (-0.13, 51.51, -0.11, 51.52))
dat_B <- extract_osm_objects (key = 'building', bbox = bbox)
dat_B
plot(dat_B)
?get_bbox
bbox <- get_bbox (c (-0.13, 51.5, -0.11, 51.52))
map <- osm_basemap (bbox = bbox, bg = 'gray20')
plot(map)
print_osm_map (map)
bbox <- osmplotr::get_bbox ("Mannheim")
bbox <- osmplotr::bbox ("Mannheim")
library(sf)
bb_poly <- getbb(place_name = "Amsterdam",
format_out = "polygon")
ls <- st_multilinestring(bb_poly)
pol <- sf::st_polygon(bb_poly)
class(pol)
ab <- st_polygonize(ls)
ab <- st_geometrycollection(list(pol))
str(ab)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_ma)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_ma)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
plot(bb_poly_ma)
bb_poly_hd <- getbb(place_name = "Heidelberg",
format_out = "polygon")
ls <- st_multilinestring(bb_poly_ma)
lnd <- read_sf("https://github.com/Robinlovelace/Creating-maps-in-R/tree/master/data/london_sport.shp")
getwd()
setwd("D:/github/geocourse/slides")
lnd <- read_sf("../data/london_sport.shp")
lnd <- read_sf("../data/london_sport.shp")
plot(lnd)
library(XML)
dat <- xmlParse("../data/bus_stop_amsterdam.kml")
getwd()
setwd("slides/")
dat <- xmlParse("../data/bus_stop_amsterdam.kml")
head(dat)
xpathApply(dat,"//tag[@k = 'name']")[[1]]
dat <- xmlParse("../data/bus_stop_amsterdam.kml")
dat
xpathApply(dat,"//tag[@k = 'name']")
xpathApply(dat,"//tag[@k = 'name']")
xmltop = xmlRoot(dat)
xmltop
xpathApply(xmltop,"//tag[@k = 'name']")
xpathApply(xmltop,"tag[@k = 'name']")
xpathApply(xmltop,"tag['name']")
xpathApply(dat,"tag['name']")
xpathApply(dat,"//['name']")
xpathApply(dat,"['name']")
xpathApply(dat,"//")
xmltop
xpathApply(dat,"//tag[@k = 'bench']")
xpathApply(dat,"/Document")
xpathApply(dat,"Document")
xmltop
head(xmltop)
xmltop[1:10]
xmltop[[1]]
xmltop[[1]][1:5]
xmltop[[1]]$name
xmltop$Document
xmltop[[1]]
xmltop[[1]]$name[[1]]
xmltop[[1]]$name
xmltop[[1]][[1]]
xmltop[[1]][[1:4]]
xmltop[[1]][[1:2]]
install.packages("rjson")
library(rjson)
getwd()
setwd("slides/")
library(osmdata)
dat <- osmdata_xml("../data/162149882.xml")
dat <- osmdata_xml("https://www.openstreetmap.org/api/0.6/node/4290854847")
dat <- osmdata_xml("../data/4290854847.xml")
dat <- osmdata_sf("../data/4290854847.xml")
dat <- xmlParse("../data/4290854847.xml")
library(XML)
dat <- xmlParse("../data/4290854847.xml")
xmltop = xmlRoot(dat)
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
plantcat
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df
install.packages("rnaturalearth")
library(rnaturalearth)
usa = ne_countries(country = "United States of America") # United States borders
class(usa)
usa_sf = st_as_sf(usa)
library(sf)
usa_sf = st_as_sf(usa)
plot(usa_sf)
usa_sf
library("osmar")
node_4290854847 <- xmlParse("../data/162149882.xml")
centraal <- as_osmar(node_4290854847)
centraal
dat <- st_read("../data/162149882.xml")
dat
dat$geometry
dat$osm_id
dat$name
dat$highway
dat$other_tags
dat <- st_read("Amsterdam_highway_primary.osm")
dat <- st_read("../data/Amsterdam_highway_primary.osm")
dat
dat$osm_id
dat$name
dat$geometry
str(dat)
typeof(dat)
plot(dat$geometry)
plot(dat$geometry,type="l")
plot(dat$geometry,pch=20,col=rgb(0,0,1,.1))
st_layers("../data/Amsterdam_highway_primary.osm")
dat <- st_read("../data/Amsterdam_highway_primary.osm","lines")
st_layers("../data/Amsterdam_highway_primary.osm")
plot(dat$geometry)
library(tmap)
qtm(dat$geometry)
st_layers("ams_centraal.osm")
st_layers("../data/ams_centraal.osm")
datm <- st_read("../data/ams_centraal.osm","multipolygons")
sp::plot(datm$geometry)
datm1 <- datm[datm$building]
datm$building
datm1 <- datm[which(datm$building=="apartments",]
ncg = st_geometry(datm)
plot(ncg)
datp <- sf::st_polygon(datm)
ncg
ncg
names(ncg)
datm$name
datm$building
datm %>% select(building) %>% head(2)
library(dplyr)
datm %>% select(building) %>% head(2)
buis <- datm %>% select(building)
plot(buis)
buis2 <- datm %>% as.data.frame %>% select(building)
plot(buis2)
head(buis)
plot(buis2$geometry)
datbuis <- datm[, "building", drop = TRUE]
plot(datbuis)
datbuis
houses = datm[datm$building == "house",]
class(houses)
## [1] "sf"         "data.frame"
datm[houses,]
## [1] "sf"         "data.frame"
dhous <- datm[houses,]
plot(dhous$geometry)
plot(st_geometry(houses))
datm$building
houses <- datm[datm$building %in% c("house","yes"),]
plot(st_geometry(houses))
houses <- datm[datm$building %in% c("house","yes","apartments"),]
plot(st_geometry(houses))
demo(sf::affine)
?sf::nc
demo(nc, ask = FALSE, echo = FALSE)
lon <- st_read("../data/london_sport.shp")
plot(lon$geometry)
st_geometry(bb_poly_ma)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
st_geometry(bb_poly_ma)
mpol <- sf::st_multipolygon(bb_poly)
mpol <- sf::st_multipolygon(bb_poly_ma)
coursepath <-"https://github.com/Japhilko/geocourse"
coursepath <-"https://github.com/Japhilko/geocourse/blob/master/"
library(knitr)
library(rmarkdown)
library(lme4)
main_path <- "D:/github/geocourse/" # zu Hause
main_path <- "D:/Daten/GitHub/geocourse/"
slide_path <- paste0(main_path,"slides/")
rcode_path <- paste0(main_path,"rcode/")
#-------------------------------------------------#
# Parts of the presentation
#-------------------------------------------------#
setwd(slide_path)
main_path <- "D:/github/geocourse/" # zu Hause
slide_path <- paste0(main_path,"slides/")
rcode_path <- paste0(main_path,"rcode/")
#-------------------------------------------------#
# Parts of the presentation
#-------------------------------------------------#
setwd(slide_path)
dirnamen <- dir()
presparts <- dirnamen[grep(".Rmd",dirnamen)]
presparts
setwd(rcode_path)
for (i in 1:length(presparts)){
purl(paste0("../slides/",presparts[i]),documentation = 2)
}
# setwd("D:/Daten/GitLab/IntroDataAnalysis/slides")
setwd(slide_path)
for (i in 1:length(presparts)){
rmarkdown::render(presparts[i], "beamer_presentation")
}
for (i in 1:length(presparts)){
rmarkdown::render(presparts[i], "all")
}
for (i in 1:length(presparts)){
rmarkdown::render(presparts[i], "md_document")
}
install.packages("RPostgreSQL")
library("RPostgreSQL")
install.packages("RPostgreSQL")
library("RPostgreSQL")
