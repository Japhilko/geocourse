datm %>% select(building) %>% head(2)
library(dplyr)
datm %>% select(building) %>% head(2)
buis <- datm %>% select(building)
plot(buis)
buis2 <- datm %>% as.data.frame %>% select(building)
plot(buis2)
head(buis)
plot(buis2$geometry)
datbuis <- datm[, "building", drop = TRUE]
plot(datbuis)
datbuis
houses = datm[datm$building == "house",]
class(houses)
## [1] "sf"         "data.frame"
datm[houses,]
## [1] "sf"         "data.frame"
dhous <- datm[houses,]
plot(dhous$geometry)
plot(st_geometry(houses))
datm$building
houses <- datm[datm$building %in% c("house","yes"),]
plot(st_geometry(houses))
houses <- datm[datm$building %in% c("house","yes","apartments"),]
plot(st_geometry(houses))
demo(sf::affine)
?sf::nc
demo(nc, ask = FALSE, echo = FALSE)
lon <- st_read("../data/london_sport.shp")
plot(lon$geometry)
st_geometry(bb_poly_ma)
bb_poly_ma <- getbb(place_name = "Mannheim",
format_out = "polygon")
st_geometry(bb_poly_ma)
mpol <- sf::st_multipolygon(bb_poly)
mpol <- sf::st_multipolygon(bb_poly_ma)
coursepath <-"https://github.com/Japhilko/geocourse"
coursepath <-"https://github.com/Japhilko/geocourse/blob/master/"
library(knitr)
library(rmarkdown)
library(lme4)
main_path <- "D:/github/geocourse/" # zu Hause
main_path <- "D:/Daten/GitHub/geocourse/"
slide_path <- paste0(main_path,"slides/")
rcode_path <- paste0(main_path,"rcode/")
#-------------------------------------------------#
# Parts of the presentation
#-------------------------------------------------#
setwd(slide_path)
main_path <- "D:/github/geocourse/" # zu Hause
slide_path <- paste0(main_path,"slides/")
rcode_path <- paste0(main_path,"rcode/")
#-------------------------------------------------#
# Parts of the presentation
#-------------------------------------------------#
setwd(slide_path)
dirnamen <- dir()
presparts <- dirnamen[grep(".Rmd",dirnamen)]
presparts
setwd(rcode_path)
for (i in 1:length(presparts)){
purl(paste0("../slides/",presparts[i]),documentation = 2)
}
# setwd("D:/Daten/GitLab/IntroDataAnalysis/slides")
setwd(slide_path)
for (i in 1:length(presparts)){
rmarkdown::render(presparts[i], "beamer_presentation")
}
for (i in 1:length(presparts)){
rmarkdown::render(presparts[i], "all")
}
for (i in 1:length(presparts)){
rmarkdown::render(presparts[i], "md_document")
}
install.packages("RPostgreSQL")
library("RPostgreSQL")
install.packages("RPostgreSQL")
library("RPostgreSQL")
setwd("D:/Eigene Dateien/Downloads/vg250-ew_3112.gk3.shape.kompakt/vg250-ew_kompakt/")
dland <-maptools::readShapePoly("VG250_P.shp")
dland <-maptools::readShapePoly("VG250_L.shp.shp")
dland <-maptools::readShapePoly("VG250_L.shp")
dat <- sf::st_read("VG250_P.shp")
plot(dat)
plot(dat[1,])
plot(dat[,1])
# dat <- sf::st_read("VG250_P.shp")
dat <- rgdal::readOGR("VG250_P.shp","VG250_P")
plot(dat)
dat
# dat <- sf::st_read("VG250_P.shp")
# dat <- rgdal::readOGR("VG250_P.shp","VG250_P")
dat <- readShapePoly("VG250_P.shp")
# dat <- sf::st_read("VG250_P.shp")
# dat <- rgdal::readOGR("VG250_P.shp","VG250_P")
dat <- maptools::readShapePoly("VG250_P.shp")
# dat <- sf::st_read("VG250_P.shp")
# dat <- rgdal::readOGR("VG250_P.shp","VG250_P")
dat <- maptools::readShapePoly("VG250_F.shp")
plot(dat)
maptools::plot(dat)
sp::plot(dat)
SAL <- dat[BLA==10,]
BLA <- substr(dat@data$RS,1,2)
SAL <- dat[BLA==10,]
plot(SAL)
SAL
head(SAL@data)
plot(SAL)
sp::plot(SAL)
library("RgoogleMaps")
MyMap <- GetMap.bbox(4.895168, 52.37022,
destfile = "Amsterdam.png",
zoom=14)
library("RgoogleMaps")
MyMap <- GetMap.bbox(4.895168, 52.37022,destfile = "Amsterdam.png",zoom=14)
MyMap <- GetMap.bbox(4.5168, 52.022,destfile = "Amsterdam.png",zoom=14)
# Chunk 1: setup_ch
knitr::opts_chunk$set(message=F,warning=F,cache=T,fig.height=4)
library(knitr)
sol <- F
# Chunk 3
library(maptools)
data(wrld_simpl)
# Chunk 4
kable(head(wrld_simpl@data[,c("ISO2","NAME","AREA","POP2005")]))
# Chunk 5
plot(wrld_simpl)
# Chunk 6
gini <- read.csv("../data/gini-index_csv.csv")
# Chunk 8
kable(head(gini))
# Chunk 9
gini12 <- gini[gini$Year==2012,]
summary(gini12$Value)
# Chunk 10
ind <- match(gini12$Country.Code,wrld_simpl$ISO3)
# Chunk 11
ind2 <- ind[!is.na(ind)]
# Chunk 12
ginimap <- wrld_simpl[ind2,]
# Chunk 13
ginimap@data$gini12 <- gini12$Value[!is.na(ind)]
# Chunk 14
library(sp)
spplot(ginimap,"gini12")
# Chunk 15
unemp <-read.csv("https://raw.githubusercontent.com/Japhilko/GeoData/master/2015/data/Unemployment.csv")
library(maptools)
data("wrld_simpl")
unemp <- unemp[-c(1:5),]
ind <- match(unemp$geo,wrld_simpl@data$NAME)
mymap <- wrld_simpl[ind,]
mymap$X2014M10 <- unemp$X2014M10
sp::spplot(mymap,"X2014M10")
# Chunk 16
library(knitr)
library(DT)
internet <- F
Nint <- !internet
par(mai=c(0,0,0,0))
?df_pop_state
# install.packages("choroplethr")
library("choroplethr")
?df_pop_state
# Chunk 1: setup_shapefiles
knitr::opts_chunk$set(echo = T,cache=T,fig.height=4,message=F,warning=F)
library(knitr)
GESIS <- F
athome <- !GESIS
ONB_ex <- T
spatsampI <-F
show_solution <- F
# Chunk 2
geodata_path <- "D:/Daten/Daten/GeoDaten/"
# Chunk 3
geodata_path <- "D:/GESIS/owncloud/presentations/20151003_Georef_SurveyT/data/"
# Chunk 4
setwd(geodata_path)
library(maptools)
onb <- readShapePoly("onb_grenzen.shp")
plot(onb)
?spsample
# Chunk 1: setup_spdep
knitr::opts_chunk$set(echo = TRUE,cache=T,eval=T,warning=F)
GESIS <- F
athome <- !GESIS
# Chunk 2
vg250path <- "J:/Work/GESISPanel_DATA/01_post_processing/c01/e_2017/ee/01_wave/data/com/geodata/vg250/"
# Chunk 3
vg250path <- "D:/GESIS/data/vg250_3112.utm32s.shape.ebenen/vg250_ebenen"
# Chunk 4
library(rgdal)
# Chunk 5
setwd(vg250path)
VG250 <- readOGR ("VG250_GEM.shp","VG250_GEM")
# Chunk 6
spatsamp <- spsample(VG250, 100,type="random")
# Chunk 7
tmp <- sp::over(spatsamp, VG250)
head(tmp)
?spTransform
# EPSG: 3857
newData<-rgdal::spTransform(spatsamp, CRS("+init=epsg:3857"))
# EPSG: 3857
newData<-sp::spTransform(spatsamp, CRS("+init=epsg:3857"))
head(Af)
# Chunk 1: setup_spdep
knitr::opts_chunk$set(echo = TRUE,cache=T,eval=T,warning=F)
GESIS <- F
athome <- !GESIS
# Chunk 2
vg250path <- "J:/Work/GESISPanel_DATA/01_post_processing/c01/e_2017/ee/01_wave/data/com/geodata/vg250/"
# Chunk 3
vg250path <- "D:/GESIS/data/vg250_3112.utm32s.shape.ebenen/vg250_ebenen"
# Chunk 4
library(rgdal)
# Chunk 5
setwd(vg250path)
VG250 <- readOGR ("VG250_GEM.shp","VG250_GEM")
# Chunk 6
spatsamp <- spsample(VG250, 100,type="random")
# Chunk 7
tmp <- sp::over(spatsamp, VG250)
# Chunk 8
head(tmp)
# Chunk 9
library(sp)
# Chunk 10
# EPSG: 3857
newData<-sp::spTransform(spatsamp, CRS("+init=epsg:3857"))
# Chunk 11
library(maptools)
data(wrld_simpl)
Africa <- wrld_simpl[wrld_simpl@data$REGION==2,]
plot(Africa)
Af <- coordinates(Africa)
head(Af)
# Chunk 1: setup_spdep
knitr::opts_chunk$set(echo = TRUE,cache=T,eval=T,warning=F)
GESIS <- F
athome <- !GESIS
# Chunk 2
vg250path <- "J:/Work/GESISPanel_DATA/01_post_processing/c01/e_2017/ee/01_wave/data/com/geodata/vg250/"
# Chunk 3
vg250path <- "D:/GESIS/data/vg250_3112.utm32s.shape.ebenen/vg250_ebenen"
# Chunk 4
library(rgdal)
# Chunk 5
setwd(vg250path)
VG250 <- readOGR ("VG250_GEM.shp","VG250_GEM")
# Chunk 6
spatsamp <- spsample(VG250, 100,type="random")
# Chunk 7
tmp <- sp::over(spatsamp, VG250)
# Chunk 8
head(tmp)
# Chunk 9
library(sp)
# Chunk 10
# EPSG: 3857
newData<-sp::spTransform(spatsamp, CRS("+init=epsg:3857"))
# Chunk 11
library(maptools)
data(wrld_simpl)
Africa <- wrld_simpl[wrld_simpl@data$REGION==2,]
plot(Africa)
# Chunk 12
Af <- coordinates(Africa)
head(Af)
# Chunk 13
plot(Africa)
points(x=Af[1,1],y=Af[1,2],col="red",pch=20)
# Chunk 14
library(spdep)
Af_nb <- tri2nb(Af)
# Chunk 15
Af_nb[1]
# Chunk 16
plot(Africa)
plot(Africa[1,],col="red",add=T)
plot(Africa[Af_nb[1][[1]],],col="orange",add=T)
IDs <- row.names(as(Africa, "data.frame"))
Af10_nb <- knn2nb(knearneigh(Af, k = 10), row.names = IDs)
Af10_nb
library(sf)
lnd <- read_sf("../data/london_sport.shp")
getwd()
setwd("D:/github/geocourse/slides")
library(sf)
lnd <- read_sf("../data/london_sport.shp")
VG250 <- readOGR ("../data/london_sport.shp","../data/london_sport")
?readOGR
getwd()
setwd("D:/github/geocourse/data/")
VG250 <- readOGR ("london_sport.shp","london_sport")
london_sport <- readOGR ("london_sport.shp","london_sport")
head(london_sport@data)
london_sport@data
install.packages("plotKML")
# Chunk 1: setup_simplefeatures
knitr::opts_chunk$set(echo = TRUE,fig.height=4,cach=T)
athome <- T
# Chunk 2
library(sf)
# Chunk 4: bbpoly_amsterdam
library(osmdata)
bb_poly <- getbb(place_name = "Amsterdam",
format_out = "polygon")
# Chunk 5
ls <- st_multilinestring(bb_poly)
# Chunk 6
pol <- sf::st_polygon(bb_poly)
class(pol)
# Chunk 8: bb_poly_ma
bb_poly_ma<-getbb(place_name="Mannheim",format_out="polygon")
# Chunk 9
plot(bb_poly_ma)
# Chunk 12
# x <- osmdata_sf(pol)
# Chunk 13
demo(nc, ask = FALSE, echo = FALSE)
# Chunk 14
plot(nc)
# Chunk 15
data_path <- "D:/GESIS/data/"
# Chunk 17
lon <- st_read("../data/london_sport.shp")
# Chunk 18
plot(lon$geometry)
# Chunk 19
st_layers("../data/ams_centraal.osm")
# Chunk 20
datm <- st_read("../data/ams_centraal.osm","multipolygons")
# Chunk 22
geom_datm <- st_geometry(datm)
plot(geom_datm)
# Chunk 23
library(dplyr)
buis <- datm %>% select(building)
plot(buis)
# Chunk 25
datbuis <- datm[, "building", drop = TRUE]
plot(datbuis)
# Chunk 26
houses <- datm[datm$building %in% c("house","yes",
"apartments"),]
# Chunk 28
class(houses)
class(st_geometry(houses))
# Chunk 29
library(tmap)
(map1 <- qtm(st_geometry(houses)))
datl <- st_read("../data/ams_centraal.osm","lines")
roads <- datl[datl$highway %in% c("residential"),]
(map2 <- map1+qtm(st_geometry(roads),lines.col="purple"))
roads2 <- datl[datl$highway %in% c("tertiary","secondary",
"primary"),]
(map3 <- map2+qtm(st_geometry(roads2),lines.col="red"))
nc
?nc
getwd()
setwd("..")
setwd("slides/")
st_layers("../data/london_sport.shp")
london <- st_read("../data/london_sport.shp")
plot(london)
sf::plot(london)
spplot(london)
sp::spplot(london)
?plot
head(london)
plot(london,col=Pop_2001)
plot(london,col=london$Pop_2001)
plot(london,col=1:4)
plot(london,col=1:20)
plot(london,"Pop_2001")
plot(london$Pop_2001)
colnames(london)
london2 <- london[,-(1:3)]
plot(london2)
library("colorramps")
library("colorRamps")
?colorRamps::blue2yellow
plot(london,col=blue2yellow(400))
plot(london,col=blue2yellow(40))
plot(london,col=blue2yellow(30))
plot(london,col=blue2yellow(20))
plot(london,col=blue2yellow(10))
ls <- st_multilinestring(bb_poly_ma)
bb_poly_ma<-getbb(place_name="Mannheim",format_out="polygon")
plot(bb_poly_ma)
bb_poly_ma
ab <- st_polygonize(bb_poly_ma)
plot(bb_poly_ma,type="l")
dev.off()
dev.off()
mapview(leaflet::gadmCHE)
library(mapview)
mapview(leaflet::gadmCHE)
(load("../data/spatsamp_68239.RData"))
mapview(spatsamp)
library(geojsonR)
multi_polygon_dat = list(list(list(c(102, 2.0), c(103, 2.0), c(103, 3.0), c(102, 2.0))),
list(list(c(100, 0.0), c(101, 1.0), c(101, 1.0), c(100, 0.0)),
list(c(100.2, 0.2), c(100.2, 0.8), c(100.8, 0.8), c(100.2, 0.2))))
multi_polygon = init$MultiPolygon(multi_polygon_dat, stringify = TRUE)
multi_polygon
# initialize class
init = TO_GeoJson$new()
# Examples covering all geometry-objects
# Point
point_dat = c(100, 1.01)
point = init$Point(point_dat, stringify = TRUE)
point
# Polygon (WITHOUT interior rings)
polygon_WITHOUT_dat = list(list(c(100, 1.01), c(200, 2.01), c(100, 1.0), c(100, 1.01)))
polygon_without = init$Polygon(polygon_WITHOUT_dat, stringify = TRUE)
polygon_without
# Polygon (WITHOUT interior rings)
polygon_WITHOUT_dat = list(list(c(100, 1.01), c(200, 2.01), c(100, 1.0), c(100, 1.01)))
polygon_without = init$Polygon(polygon_WITHOUT_dat, stringify = TRUE)
polygon_without
mapview(polygon_without)
mapview(polygon_WITHOUT_dat)
busstops <- "../data/Amsterdam_bus_stop.geojson"
mapview(bus_stops)
busstops <- "../data/Amsterdam_bus_stop.geojson"
bus_stops <- geojsonio::geojson_read(busstops,
what = "sp")
mapview(bus_stops)
gcs <- geojsonio::geojson_read("../data/ddat.geojson")
view(gcs)
mapview(gcs)
gcs
plot(gcs)
gcs <- geojsonio::geojson_read("../data/ddat.geojson",what="sp")
plot(gcs)
mapview(gcs)
library("RJSONIO")
con <- url("http://nominatim.openstreetmap.org/search?format=json&
addressdetails=1&extratags=1&q=Amsterdam+Niederlande+Rozengracht+1")
geoc <- fromJSON(paste(readLines(con,warn=F),
collapse = ''))
close(con)
mapview(geoc)
geoc
geoc$adress
geoc$address
geoc[[10]]$address
DT::datatable(dat$features$properties)
library(jsonlite)
dat<-jsonlite::fromJSON("../data/amsterdam_busstop.geojson")
DT::datatable(dat$features$properties)
st_layers("../data/london_sport.shp")
london <- st_read("../data/london_sport.shp")
DT::datatable(london@data)
london
DT::datatable(london)
spatsamp
library(spdep)
Af_nb <- tri2nb(Af)
Af_nb[1]
Af@data
# Chunk 1: setup_spdep
knitr::opts_chunk$set(echo = TRUE,cache=T,eval=T,warning=F,fig.height=6)
GESIS <- F
athome <- !GESIS
# Chunk 2
vg250path <- "J:/Work/GESISPanel_DATA/01_post_processing/c01/e_2017/ee/01_wave/data/com/geodata/vg250/"
# Chunk 3
vg250path <- "D:/GESIS/data/vg250_3112.utm32s.shape.ebenen/vg250_ebenen"
# Chunk 4
library(rgdal)
# Chunk 5
setwd(vg250path)
VG250 <- readOGR ("VG250_GEM.shp","VG250_GEM")
# Chunk 6
spatsamp <- spsample(VG250, 100,type="random")
# Chunk 7
tmp <- sp::over(spatsamp, VG250)
# Chunk 8
head(tmp[,1:6])
# Chunk 10
newData<-sp::spTransform(spatsamp, CRS("+init=epsg:3857"))
# Chunk 11
head(spatsamp)
head(newData)
# Chunk 12
library(maptools)
data(wrld_simpl)
Africa <- wrld_simpl[wrld_simpl@data$REGION==2,]
plot(Africa)
# Chunk 13
Af <- coordinates(Africa)
head(Af)
# Chunk 14
plot(Africa)
points(x=Af[1,1],y=Af[1,2],col="red",pch=20)
# Chunk 15
library(spdep)
Af_nb <- tri2nb(Af)
Af@data
Af
head(Af)
Africa@data
head(Africa@data)
Africa@data[Af_nb[1],]
Africa@data
Af_nb[1]
Africa@data[Af_nb[[1]][1],]
Africa@data[Af_nb[[1]],]
